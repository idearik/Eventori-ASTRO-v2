---
import EventCard from '../components/EventCard.astro';
import { fetchEvents } from '../lib/fetchEvents';

const events = await fetchEvents();

const now = new Date();
const upcomingEvents = events
  .filter((event: { date: string | number | Date; }) => new Date(event.date) >= now)
  .sort((a: { date: string | number | Date; }, b: { date: string | number | Date; }) => new Date(a.date).getTime() - new Date(b.date).getTime());

const pastEvents = events
  .filter((event: { date: string | number | Date; }) => new Date(event.date) < now);
---

<html>
<head>
  <title>Eventori</title>
  <link rel="stylesheet" href="/styles/global.css">
</head>
<body>
  <h1>Eventori</h1>
  
  <div class="button-container">
    <button id="upcoming-btn" class="btn-upcoming">Upcoming Events</button>
    <button id="past-btn" class="btn-past">Past Events</button>
  </div>
  
  <div id="events-container">
    {events.length === 0 ? (
      <p>No events found.</p>
    ) : (
      <>
        <div id="upcoming-events" class="event-list" style="justify-content: center;">
          {upcomingEvents.map((event: { name: any; date: any; endDate: any; location: any; status: any; description: any; url: any; }) => (
            <EventCard
              key={event.name}
              name={event.name}
              date={event.date}
              endDate={event.endDate}
              location={event.location}
              status={event.status}
              description={event.description}
              url={event.url}
              isPast={false}
            />
          ))}
        </div>
        
        <div id="past-events" class="event-list" style="display: none; justify-content: center;">
          {pastEvents.map((event: { name: any; date: any; endDate: any; location: any; status: any; description: any; url: any; }) => (
            <EventCard
              key={event.name}
              name={event.name}
              date={event.date}
              endDate={event.endDate}
              location={event.location}
              status={event.status}
              description={event.description}
              url={event.url}
              isPast={true}
            />
          ))}
        </div>
      </>
    )}
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const upcomingBtn = document.getElementById('upcoming-btn');
      const pastBtn = document.getElementById('past-btn');
      const upcomingEvents = document.getElementById('upcoming-events');
      const pastEvents = document.getElementById('past-events');
  
      if (upcomingBtn && pastBtn && upcomingEvents && pastEvents) {
        upcomingBtn.addEventListener('click', () => {
          upcomingEvents.style.display = 'flex';
          pastEvents.style.display = 'none';
        });
  
        pastBtn.addEventListener('click', () => {
          upcomingEvents.style.display = 'none';
          pastEvents.style.display = 'flex';
        });
      }
    });
  </script>
</body>
</html>
